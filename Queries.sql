/* All available tables with waiters assigned to them */
SELECT 
    restaurant_tables.TableNumber AS 'Table Number',
    restaurant_tables.Num_Seats AS 'Seats',
    CONCAT(workers.FirstName, ' ', workers.LastName) AS 'Assigned Waiter'
FROM restaurant_tables
JOIN workers ON restaurant_tables.Assigned_Waiter = workers.WorkerID
WHERE restaurant_tables.Table_Status = 'AVAILABLE'
ORDER BY restaurant_tables.Num_Seats DESC;

/* Find customers with multiple reservations */
SELECT 
    customers.CustomerID AS 'Customer ID',
    CONCAT(customers.FirstName, ' ', customers.LastName) AS 'Customer Name',
    COUNT(reservations.ReservationID) AS 'Total Reservations'
FROM reservations
JOIN customers ON reservations.Customer = customers.CustomerID
GROUP BY customers.CustomerID
HAVING COUNT(reservations.ReservationID) > 1
ORDER BY COUNT(reservations.ReservationID) DESC;

/* Get all active promotions */
SELECT 
    Title AS 'Promotion',
    Promo_Description AS 'Description',
    Start_Date AS 'Start Date',
    End_Date AS 'End Date',
    CONCAT(Discount_Amount * 100, '%') AS 'Discount'
FROM promotions
WHERE Is_Active = TRUE
ORDER BY End_Date;

/* ALl items with discounts */
SELECT 
    menuitem.ItemName AS 'Item',
    menuitem.Price AS 'Original Price',
    CONCAT(promotions.Discount_Amount * 100, '%') AS 'Discount',
    ROUND(menuitem.Price - (menuitem.Price * promotions.Discount_Amount), 2) AS 'Discounted Price'
FROM menuitem
JOIN promotions ON menuitem.Promotions = promotions.PromotionID
WHERE promotions.Is_Active = TRUE;

/* Total of all orders from a certain table */
SELECT 
    orders.TableID AS 'Table Number',
    SUM(orders.TotalPrice) AS 'Total Revenue'
FROM orders
GROUP BY orders.TableID
ORDER BY SUM(orders.TotalPrice) DESC;

/* How many waiters are assigned to each table */
SELECT 
    CONCAT(workers.FirstName, ' ', workers.LastName) AS 'Waiter',
    COUNT(restaurant_tables.TableNumber) AS 'Tables Assigned'
FROM workers
JOIN restaurant_tables ON workers.WorkerID = restaurant_tables.Assigned_Waiter
WHERE workers.Title LIKE '%Waiter%' OR workers.Title LIKE '%Waitress%'
GROUP BY workers.WorkerID
ORDER BY COUNT(restaurant_tables.TableNumber) DESC;

/* Get names of customers from all failed transactions */
SELECT 
    payment.TransactionID AS 'Transaction ID',
    CONCAT(customers.FirstName, ' ', customers.LastName) AS 'Customer',
    payment.Amount AS 'Amount To Pay'
FROM payment
JOIN reservations ON payment.ReserveID = reservations.ReservationID
JOIN customers ON reservations.Customer = customers.CustomerID
WHERE payment.payment_status = "FAILED";
	
/* Find the most expensive menu item in each category */
SELECT ItemName, Category, Price
FROM restaurant_reservation.menuitem
WHERE Price = (
	SELECT MAX(Price) FROM restaurant_reservation.menuitem AS m2
	WHERE m2.Category = menuitem.Category
);

/* Rank the total revenue generated by each restaurant */
SELECT restaurants.Location, SUM(orders.TotalPrice) AS TotalRevenue,
		RANK() OVER (ORDER BY SUM(orders.TotalPrice) DESC) AS RevenueBank
FROM restaurant_reservation.orders
JOIN restaurant_reservation.restaurants ON orders.restaurant = restaurants.RestaurantID
GROUP BY restaurants.Location

/* Assign a unique row number to each reservation, ordered by date and time */
SELECT ReservationID, Customer, Reservation_Date, Reservation_Time, 
	ROW_NUMBER() OVER (PARTITION BY Location ORDER BY Reservation_Date, Reservation_Time) AS RowNum
FROM restaurant_reservation.reservations;

/* List employees along with the total number of tables they are responsible for */
SELECT workers.FirstName, workers.LastName, COUNT(restaurant_tables.TableNumber) AS TableCount
FROM restaurant_reservation.workers
LEFT JOIN restaurant_reservation.restaurant_tables ON workers.WorkerID = restaurant_tables.Assigned_Waiter
GROUP BY workers.FirstName, workers.LastName
ORDER BY TableCount DESC;

/* Customer who used the most promotions in their order */
SELECT c.FirstName, c.LastName, COUNT(mi.Promotions) AS PromoUsage
FROM restaurant_reservation.customers c
JOIN restaurant_reservation.reservations r ON c.CustomerID = r.Customer
JOIN restaurant_reservation.orders o ON r.ReservationID = o.OrderID
JOIN restaurant_reservation.menuitem mi ON mi.Promotions IS NOT NULL
GROUP BY c.FirstName, c.LastName
ORDER BY PromoUsage DESC
LIMIT 1;

/* Which restaurant has the highest number of reservations */
SELECT r.Location, COUNT(res.ReservationID) AS ReservationCount
FROM restaurant_reservation.restaurants r
JOIN restaurant_reservation.reservations res ON r.RestaurantID = res.Location
GROUP BY r.Location
ORDER BY ReservationCount DESC
LIMIT 1;